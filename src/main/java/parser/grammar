######

This file contains the syntactic grammar of our simple language
var x: int = 10;
func int main(arg: int, argvs: string[]) { return 0; }
-----------------------------------------------------------------------
Warning: Parsers are context-free grammar, i.e - they don't care about the context 'Meaning/Logic' of the program. it's about syntactic construction of tokens.
E.g var x: int = 10 + true; .  Shouldn't be a problem for a parser since the construction of assignment expression matches the requirements/rules.
Further, This semantic/logical error should be caught in other compiler's phases. Not to be confused

######

###
Vocab: {} indicate zero or more of this kind of syntax.
       [] One and only one of this construct
###

###### START GRAMMAR ######


functionDecl := FUNC (VOID | type) identifier  // method
                         parameters
                         block
type := (basicType)

identifier = IDENTIFIER {DOT identifier}
basicType := INT

parameters := L_PAREN
              [parameter {COMMA parameter}]
              R_PAREN

parameter := type IDENTIFIER

block := L_BRACE /*local-block*/ R_BRACE

typealias := TYPEALIAS identifier EQUAL type  /*TypeAlias construct can be everywhere in the translation unit. As it belongs the current position of the definition*/
## TODO
variableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]